{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["const CLASSES = {\n  selectContainer: 'select-option-container',\n  selectOption: 'select-option',\n  floatingLabel: 'floating-label',\n  notchedOutline: 'notched-outline',\n  notchedOutlineNotch: 'notched-outline__notch',\n  notchedOutlineLeading: 'notched-outline__leading',\n  notchedOutlineTrailing: 'notched-outline__trailing',\n  selectOptionTrigger: 'select-option-trigger',\n  selectOptionList: 'select-option-list',\n  selectOptionListItem: 'select-option-list-item',\n  selectOptionListItemSelected: 'select-option-list-item--selected',\n  selectOptionOpened: 'select-option--opened',\n  selectOptionMobile: 'select-option--mobile',\n  selectOptionSelected: 'select-option--selected',\n  selectOptionLabeled: 'select-option--labeled',\n  selectOptionUnlabeled: 'select-option--unlabeled',\n  selectOptionDownstairs: 'select-option--downstairs',\n};\n\nclass SelectOptions {\n  private selectContainer: HTMLSelectElement[] = [];\n\n  private floatingLabel: HTMLElement[] = [];\n\n  private customSelects: HTMLElement[] = [];\n\n  private openSelect: HTMLElement | null = null;\n\n  private resizeObserver: ResizeObserver;\n\n  private readonly mobileMode: boolean = false;\n\n  constructor({ mobileMode = false }: { mobileMode?: boolean } = {}) {\n    this.mobileMode = mobileMode;\n    this.selectContainer = Array.from(\n      document.querySelectorAll(`.${CLASSES.selectContainer} select`),\n    );\n    this.floatingLabel = Array.from(\n      document.querySelectorAll(`.${CLASSES.floatingLabel}`),\n    );\n    this.resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        const notchElement = entry.target\n          .closest(`.${CLASSES.notchedOutline}`)\n          ?.querySelector(\n            `.${CLASSES.notchedOutlineNotch}`,\n          ) as HTMLElement | null;\n\n        if (notchElement) {\n          SelectOptions.setNotchWidth(\n            notchElement,\n            SelectOptions.getNotchWidth(notchElement),\n          );\n        }\n      });\n    });\n  }\n\n  private notched() {\n    this.floatingLabel.forEach((label) => {\n      let notchedOutline = label.closest(`.${CLASSES.notchedOutline}`);\n      let notch: HTMLElement;\n\n      if (!notchedOutline) {\n        notchedOutline = SelectOptions.createNotchedOutline(label);\n        notch = notchedOutline.querySelector(\n          `.${CLASSES.notchedOutlineNotch}`,\n        ) as HTMLElement;\n\n        label = notch.querySelector(`.${CLASSES.floatingLabel}`) as HTMLElement;\n      } else {\n        notch = notchedOutline.querySelector(\n          `.${CLASSES.notchedOutlineNotch}`,\n        ) as HTMLElement;\n\n        label = notch.querySelector(`.${CLASSES.floatingLabel}`) as HTMLElement;\n      }\n\n      SelectOptions.setNotchWidth(notch, SelectOptions.getNotchWidth(notch));\n\n      this.resizeObserver.observe(label);\n    });\n  }\n\n  private static createNotchedOutline(label: HTMLElement): HTMLElement {\n    const notchedOutline = document.createElement('div');\n\n    notchedOutline.classList.add(CLASSES.notchedOutline);\n    notchedOutline.innerHTML = `\n      <div class=\"${CLASSES.notchedOutlineLeading}\"></div>\n      <div class=\"${CLASSES.notchedOutlineNotch}\">${label.outerHTML}</div>\n      <div class=\"${CLASSES.notchedOutlineTrailing}\"></div>\n    `;\n\n    label.replaceWith(notchedOutline);\n\n    return notchedOutline;\n  }\n\n  private static setNotchWidth(notchElement: HTMLElement, width: string) {\n    notchElement.style.width = width;\n  }\n\n  private static getNotchWidth(notch: HTMLElement): string {\n    const label = notch.querySelector(`.${CLASSES.floatingLabel}`) as HTMLElement;\n\n    return label\n      ? `${(parseFloat(getComputedStyle(label).width) + 13) * 0.75}px`\n      : 'auto';\n  }\n\n  private setupCustomSelect(\n    selectElement: HTMLSelectElement,\n    customSelect: HTMLElement,\n    options: HTMLOptionElement[],\n  ) {\n    const selectTrigger = customSelect.querySelector(`.${CLASSES.selectOptionTrigger}`)\n      || document.createElement('div');\n    const selectItems = customSelect.querySelector(`.${CLASSES.selectOptionList}`)\n      || document.createElement('div');\n\n    selectTrigger.classList.add(CLASSES.selectOptionTrigger);\n    selectItems.classList.add(CLASSES.selectOptionList);\n    customSelect.append(selectTrigger, selectItems);\n\n    this.createOptions(\n      selectElement,\n        selectTrigger as HTMLElement,\n        selectItems as HTMLElement,\n        options,\n    );\n\n    selectTrigger.addEventListener('click', (e) => this.toggleDropdown(e, customSelect));\n\n    SelectOptions.updateCustomSelectState(customSelect, selectElement);\n\n    this.customSelects.push(customSelect);\n\n    selectElement.addEventListener('change', () => {\n      this.updateCustomSelect(selectElement, customSelect, options);\n    });\n\n    if (this.mobileMode && SelectOptions.isMobileDevice()) {\n      customSelect.classList.add(CLASSES.selectOptionMobile);\n    }\n  }\n\n  private createOptions(\n    selectElement: HTMLSelectElement,\n    selectTrigger: HTMLElement,\n    selectItems: HTMLElement,\n    options: HTMLOptionElement[],\n  ) {\n    const newSelectTrigger = selectTrigger;\n    const newSelectItems = selectItems;\n\n    newSelectItems.innerHTML = '';\n\n    options.forEach((option, index) => {\n      const selectItem = document.createElement('div');\n\n      selectItem.classList.add(CLASSES.selectOptionListItem);\n      selectItem.textContent = option.textContent;\n\n      const customValue = option.getAttribute('data-custom');\n\n      if (customValue) {\n        selectItem.classList.add(\n          `${CLASSES.selectOptionListItem}--${customValue}`,\n        );\n      }\n\n      if (option.selected) {\n        selectItem.classList.add(CLASSES.selectOptionListItemSelected);\n        newSelectTrigger.textContent = option.textContent;\n\n        if (customValue) {\n          newSelectTrigger.classList.add(\n            `${CLASSES.selectOptionTrigger}--${customValue}`,\n          );\n        }\n      }\n\n      selectItem.addEventListener('click', () => this.selectItem(\n        newSelectTrigger as HTMLElement,\n        selectElement,\n        index,\n        newSelectItems,\n      ));\n\n      newSelectItems.appendChild(selectItem);\n    });\n  }\n\n  private updateCustomSelect(\n    selectElement: HTMLSelectElement,\n    customSelect: HTMLElement,\n    options: HTMLOptionElement[],\n  ) {\n    const selectTrigger = customSelect.querySelector(\n      `.${CLASSES.selectOptionTrigger}`,\n    ) as HTMLElement;\n    const selectItems = customSelect.querySelector(\n      `.${CLASSES.selectOptionList}`,\n    ) as HTMLElement;\n    const { selectedIndex } = selectElement;\n    const selectedOption = options[selectedIndex];\n    const customValue = selectedOption.getAttribute('data-custom');\n\n    selectTrigger.textContent = selectedOption.textContent;\n\n    SelectOptions.updateClasses(\n      selectTrigger,\n      `${CLASSES.selectOptionTrigger}--${customValue}`,\n    );\n\n    customSelect.classList.toggle(\n      CLASSES.selectOptionSelected,\n      selectedIndex > 0,\n    );\n\n    this.createOptions(selectElement, selectTrigger, selectItems, options);\n  }\n\n  private selectItem(\n    selectTrigger: HTMLElement,\n    selectElement: HTMLSelectElement,\n    index: number,\n    selectItems: HTMLElement,\n  ) {\n    selectElement.selectedIndex = index;\n    selectElement.dispatchEvent(new Event('change'));\n\n    this.createOptions(\n      selectElement,\n      selectTrigger,\n      selectItems,\n        Array.from(selectElement.options) as HTMLOptionElement[],\n    );\n    this.closeDropdown(\n        selectTrigger.closest(`.${CLASSES.selectOption}`) as HTMLElement,\n    );\n  }\n\n  private closeDropdown(customSelect: HTMLElement) {\n    customSelect.classList.remove(CLASSES.selectOptionOpened);\n\n    this.openSelect = null;\n  }\n\n  private openDropdown(customSelect: HTMLElement) {\n    this.closeOpenedDropdowns();\n\n    customSelect.classList.add(CLASSES.selectOptionOpened);\n\n    this.openSelect = customSelect;\n  }\n\n  private closeOpenedDropdowns(e?: MouseEvent) {\n    this.customSelects.forEach((dropdown) => {\n      if (!e || !dropdown.contains(e.target as Node)) {\n        dropdown.classList.remove(CLASSES.selectOptionOpened);\n      }\n    });\n\n    this.openSelect = null;\n  }\n\n  private toggleDropdown(e: Event, customSelect: HTMLElement) {\n    e.stopPropagation();\n\n    if (this.openSelect === customSelect) {\n      this.closeDropdown(customSelect);\n    } else {\n      this.openDropdown(customSelect);\n    }\n  }\n\n  private static checkAndSetDownstairsClass(customSelect: HTMLElement) {\n    const rect = customSelect.getBoundingClientRect();\n\n    customSelect.classList.toggle(\n      CLASSES.selectOptionDownstairs,\n      rect.bottom + 160 > window.innerHeight,\n    );\n  }\n\n  private handleResize() {\n    this.customSelects.forEach(SelectOptions.checkAndSetDownstairsClass);\n  }\n\n  private static isMobileOS(): boolean {\n    return (\n      /android/i.test(navigator.userAgent || navigator.vendor)\n        || (/iPad|iPhone|iPod/.test(navigator.userAgent || navigator.vendor)\n          && !('MSStream' in window))\n    );\n  }\n\n  private static isTouchDevice(): boolean {\n    return (\n      'ontouchstart' in window\n        || navigator.maxTouchPoints > 0\n        || window.matchMedia('(hover: none) and (pointer: coarse)').matches\n    );\n  }\n\n  private static isMobileDevice(): boolean {\n    return SelectOptions.isTouchDevice() || SelectOptions.isMobileOS();\n  }\n\n  private static updateCustomSelectState(\n    customSelect: HTMLElement,\n    selectElement: HTMLSelectElement,\n  ) {\n    const hasLabel = customSelect.querySelector(`label.${CLASSES.floatingLabel}`) !== null;\n\n    customSelect.classList.toggle(CLASSES.selectOptionLabeled, hasLabel);\n    customSelect.classList.toggle(CLASSES.selectOptionUnlabeled, !hasLabel);\n    customSelect.classList.toggle(\n      CLASSES.selectOptionSelected,\n      hasLabel && selectElement.selectedIndex > 0,\n    );\n  }\n\n  private static updateClasses(element: HTMLElement, className: string) {\n    element.classList.remove(\n      ...Array.from(element.classList).filter((cls) => cls.startsWith(`${CLASSES.selectOptionTrigger}--`)),\n    );\n\n    if (className) element.classList.add(className);\n  }\n\n  public updateSelects() {\n    this.selectContainer.forEach((selectElement) => {\n      const customSelect = selectElement\n        .closest(`.${CLASSES.selectContainer}`)\n        ?.querySelector(`.${CLASSES.selectOption}`) as HTMLElement;\n      const options = Array.from(selectElement.options) as HTMLOptionElement[];\n\n      if (customSelect) {\n        this.updateCustomSelect(selectElement, customSelect, options);\n      }\n    });\n  }\n\n  async init() {\n    this.notched();\n\n    this.selectContainer.forEach((selectElement) => {\n      const customSelect = selectElement\n        .closest(`.${CLASSES.selectContainer}`)\n        ?.querySelector(`.${CLASSES.selectOption}`) as HTMLElement;\n      const options = Array.from(selectElement.options) as HTMLOptionElement[];\n\n      if (customSelect) {\n        this.setupCustomSelect(selectElement, customSelect, options);\n\n        SelectOptions.checkAndSetDownstairsClass(customSelect);\n      }\n    });\n\n    document.addEventListener('pointerdown', this.closeOpenedDropdowns.bind(this));\n\n    window.addEventListener('resize', this.handleResize.bind(this));\n    window.addEventListener('scroll', this.handleResize.bind(this));\n  }\n}\n\nexport default SelectOptions;\n"],"names":[],"version":3,"file":"index.js.map"}