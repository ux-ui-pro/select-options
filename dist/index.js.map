{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["const CLASSES = {\n  selectContainer: 'select-option-container',\n  select: 'select-option',\n  floatingLabel: 'floating-label',\n  notchedOutline: 'notched-outline',\n  notchedOutlineNotch: 'notched-outline__notch',\n  notchedOutlineLeading: 'notched-outline__leading',\n  notchedOutlineTrailing: 'notched-outline__trailing',\n  selectOptionTrigger: 'select-option-trigger',\n  selectOptionList: 'select-option-list',\n  selectOptionListItem: 'select-option-list-item',\n  selectOptionListItemSelected: 'select-option-list-item--selected',\n  selectOptionOpened: 'select-option--opened',\n  selectOptionMobile: 'select-option--mobile',\n  selectOptionSelected: 'select-option--selected',\n  selectOptionLabeled: 'select-option--labeled',\n  selectOptionUnlabeled: 'select-option--unlabeled',\n  selectOptionDownstairs: 'select-option--downstairs',\n};\n\nclass SelectOptions {\n  private selectContainer: HTMLSelectElement[] = [];\n\n  private floatingLabel: HTMLElement[] = [];\n\n  private notches: { container: HTMLElement, notch: HTMLElement }[] = [];\n\n  private customSelects: HTMLElement[] = [];\n\n  private openSelect: HTMLElement | null = null;\n\n  private resizeObserver: ResizeObserver;\n\n  private readonly mobileMode: boolean = false;\n\n  constructor({ mobileMode = false }: { mobileMode?: boolean } = {}) {\n    this.mobileMode = mobileMode;\n    this.selectContainer = Array.from(document.querySelectorAll(`.${CLASSES.selectContainer} select`));\n    this.floatingLabel = Array.from(document.querySelectorAll(`.${CLASSES.floatingLabel}`));\n    this.resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        const notchElement = entry.target.closest(`.${CLASSES.notchedOutline}`)?.querySelector(`.${CLASSES.notchedOutlineNotch}`) as HTMLElement | null;\n\n        if (notchElement) SelectOptions.setNotchWidth(notchElement, SelectOptions.getNotchWidth(notchElement));\n      });\n    });\n  }\n\n  private notched() {\n    this.floatingLabel.forEach((label) => {\n      const notchedOutline = label.closest(`.${CLASSES.notchedOutline}`) ?? SelectOptions.createNotchedOutline(label);\n      const notch = notchedOutline.querySelector(`.${CLASSES.notchedOutlineNotch}`) as HTMLElement;\n\n      this.notches.push({ container: notchedOutline.parentNode as HTMLElement, notch });\n\n      SelectOptions.setNotchWidth(notch, SelectOptions.getNotchWidth(notch));\n\n      this.resizeObserver.observe(label);\n    });\n  }\n\n  private static createNotchedOutline(label: HTMLElement): HTMLElement {\n    const notchedOutline = document.createElement('div');\n\n    notchedOutline.classList.add(CLASSES.notchedOutline);\n    notchedOutline.innerHTML = `\n      <div class=\"${CLASSES.notchedOutlineLeading}\"></div>\n      <div class=\"${CLASSES.notchedOutlineNotch}\">${label.outerHTML}</div>\n      <div class=\"${CLASSES.notchedOutlineTrailing}\"></div>\n    `;\n\n    label.replaceWith(notchedOutline);\n\n    return notchedOutline;\n  }\n\n  private static setNotchWidth(notchElement: HTMLElement, width: string) {\n    const newNotchElement = notchElement;\n\n    newNotchElement.style.width = width;\n  }\n\n  private static getNotchWidth(notch: HTMLElement): string {\n    const label = notch.querySelector(`.${CLASSES.floatingLabel}`) as HTMLElement;\n\n    return label ? `${(parseFloat(getComputedStyle(label).width) + 13) * 0.75}px` : 'auto';\n  }\n\n  private setupCustomSelect(selectElement: HTMLSelectElement, customSelect: HTMLElement, options: HTMLOptionElement[]) {\n    const selectTrigger = customSelect.querySelector(`.${CLASSES.selectOptionTrigger}`) || document.createElement('div');\n    const selectItems = customSelect.querySelector(`.${CLASSES.selectOptionList}`) || document.createElement('div');\n\n    selectTrigger.classList.add(CLASSES.selectOptionTrigger);\n    selectItems.classList.add(CLASSES.selectOptionList);\n    customSelect.append(selectTrigger, selectItems);\n\n    this.createOptions(selectElement, selectTrigger as HTMLElement, selectItems as HTMLElement, options);\n\n    selectTrigger.addEventListener('click', (e) => this.toggleDropdown(e, customSelect));\n\n    SelectOptions.updateCustomSelectState(customSelect, selectElement);\n\n    this.customSelects.push(customSelect);\n\n    selectElement.addEventListener('change', () => {\n      this.updateCustomSelect(selectElement, customSelect, options);\n    });\n\n    if (this.mobileMode && SelectOptions.isMobileDevice()) {\n      customSelect.classList.add(CLASSES.selectOptionMobile);\n    }\n  }\n\n  private createOptions(selectElement: HTMLSelectElement, selectTrigger: HTMLElement, selectItems: HTMLElement, options: HTMLOptionElement[]) {\n    const newSelectTrigger = selectTrigger;\n    const newSelectItems = selectItems;\n\n    newSelectItems.innerHTML = '';\n\n    options.forEach((option, index) => {\n      const selectItem = document.createElement('div');\n\n      selectItem.classList.add(CLASSES.selectOptionListItem);\n      selectItem.textContent = option.textContent;\n\n      const customValue = option.getAttribute('data-custom');\n\n      if (customValue) selectItem.classList.add(`${CLASSES.selectOptionListItem}--${customValue}`);\n\n      if (option.selected) {\n        selectItem.classList.add(CLASSES.selectOptionListItemSelected);\n        newSelectTrigger.textContent = option.textContent;\n\n        if (customValue) newSelectTrigger.classList.add(`${CLASSES.selectOptionTrigger}--${customValue}`);\n      }\n\n      selectItem.addEventListener('click', () => this.selectItem(selectItem, newSelectTrigger, selectElement, index, newSelectItems));\n\n      newSelectItems.appendChild(selectItem);\n    });\n  }\n\n  private updateCustomSelect(selectElement: HTMLSelectElement, customSelect: HTMLElement, options: HTMLOptionElement[]) {\n    const selectTrigger = customSelect.querySelector(`.${CLASSES.selectOptionTrigger}`) as HTMLElement;\n    const selectItems = customSelect.querySelector(`.${CLASSES.selectOptionList}`) as HTMLElement;\n    const { selectedIndex } = selectElement;\n    const selectedOption = options[selectedIndex];\n    const customValue = selectedOption.getAttribute('data-custom');\n\n    selectTrigger.textContent = selectedOption.textContent;\n    SelectOptions.updateClasses(selectTrigger, `${CLASSES.selectOptionTrigger}--${customValue}`);\n    customSelect.classList.toggle(CLASSES.selectOptionSelected, selectedIndex > 0);\n\n    this.createOptions(selectElement, selectTrigger, selectItems, options);\n  }\n\n  private selectItem(selectItem: HTMLElement, selectTrigger: HTMLElement, selectElement: HTMLSelectElement, index: number, selectItems: HTMLElement) {\n    const newSelectElement = selectElement;\n\n    newSelectElement.selectedIndex = index;\n    newSelectElement.dispatchEvent(new Event('change'));\n\n    this.createOptions(newSelectElement, selectTrigger, selectItems, Array.from(newSelectElement.options) as HTMLOptionElement[]);\n    this.closeDropdown(selectTrigger.closest(`.${CLASSES.select}`) as HTMLElement);\n  }\n\n  private closeDropdown(customSelect: HTMLElement) {\n    customSelect.classList.remove(CLASSES.selectOptionOpened);\n\n    this.openSelect = null;\n  }\n\n  private openDropdown(customSelect: HTMLElement) {\n    this.closeOpenedDropdowns();\n\n    customSelect.classList.add(CLASSES.selectOptionOpened);\n\n    this.openSelect = customSelect;\n  }\n\n  private closeOpenedDropdowns(e?: MouseEvent) {\n    this.customSelects.forEach((dropdown) => {\n      if (!e || !dropdown.contains(e.target as Node)) dropdown.classList.remove(CLASSES.selectOptionOpened);\n    });\n\n    this.openSelect = null;\n  }\n\n  private toggleDropdown(e: Event, customSelect: HTMLElement) {\n    e.stopPropagation();\n\n    if (this.openSelect === customSelect) {\n      this.closeDropdown(customSelect);\n    } else {\n      this.openDropdown(customSelect);\n    }\n  }\n\n  private static checkAndSetDownstairsClass(customSelect: HTMLElement) {\n    const rect = customSelect.getBoundingClientRect();\n\n    customSelect.classList.toggle(CLASSES.selectOptionDownstairs, rect.bottom + 160 > window.innerHeight);\n  }\n\n  private handleResize() {\n    this.customSelects.forEach(SelectOptions.checkAndSetDownstairsClass);\n  }\n\n  private static isMobileOS(): boolean {\n    return (/android/i.test(navigator.userAgent || navigator.vendor)) || ((/iPad|iPhone|iPod/.test(navigator.userAgent || navigator.vendor)) && !('MSStream' in window));\n  }\n\n  private static isTouchDevice(): boolean {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || window.matchMedia('(hover: none) and (pointer: coarse)').matches;\n  }\n\n  private static isMobileDevice(): boolean {\n    return SelectOptions.isTouchDevice() || SelectOptions.isMobileOS();\n  }\n\n  private static updateCustomSelectState(customSelect: HTMLElement, selectElement: HTMLSelectElement) {\n    const hasLabel = customSelect.querySelector(`label.${CLASSES.floatingLabel}`) !== null;\n\n    customSelect.classList.toggle(CLASSES.selectOptionLabeled, hasLabel);\n    customSelect.classList.toggle(CLASSES.selectOptionUnlabeled, !hasLabel);\n    customSelect.classList.toggle(CLASSES.selectOptionSelected, hasLabel && selectElement.selectedIndex > 0);\n  }\n\n  private static updateClasses(element: HTMLElement, className: string) {\n    element.classList.remove(...Array.from(element.classList).filter((cls) => cls.startsWith(`${CLASSES.selectOptionTrigger}--`)));\n\n    if (className) element.classList.add(className);\n  }\n\n  public updateSelects() {\n    this.selectContainer.forEach((selectElement) => {\n      const customSelect = selectElement.closest(`.${CLASSES.selectContainer}`)?.querySelector(`.${CLASSES.select}`) as HTMLElement;\n      const options = Array.from(selectElement.options) as HTMLOptionElement[];\n\n      if (customSelect) {\n        this.updateCustomSelect(selectElement, customSelect, options);\n      }\n    });\n  }\n\n  async init() {\n    this.notched();\n\n    this.selectContainer.forEach((selectElement) => {\n      const customSelect = selectElement.closest(`.${CLASSES.selectContainer}`)?.querySelector(`.${CLASSES.select}`) as HTMLElement;\n      const options = Array.from(selectElement.options) as HTMLOptionElement[];\n\n      if (customSelect) {\n        this.setupCustomSelect(selectElement, customSelect, options);\n\n        SelectOptions.checkAndSetDownstairsClass(customSelect);\n      }\n    });\n\n    document.addEventListener('click', this.closeOpenedDropdowns.bind(this));\n    window.addEventListener('resize', this.handleResize.bind(this));\n    window.addEventListener('scroll', this.handleResize.bind(this));\n  }\n}\n\nexport default SelectOptions;\n"],"names":[],"version":3,"file":"index.js.map"}