{"mappings":";;;;;;;;;;;;AAAA,MAAM;IACJ,aAAc,CAEd;IAEA,OAAO;QACL,MAAM,iBAAiB,SAAS,gBAAgB,CAAC;QAEjD,eAAe,OAAO,CAAC,CAAA;YACrB,MAAM,eAAe,IAAI,CAAC,CAAC,kBAAkB,CAAC;YAE9C,cAAc,KAAK,CAAC,OAAO,GAAG;YAC9B,cAAc,UAAU,CAAC,YAAY,CAAC,cAAc,cAAc,WAAW;QAC/E;QAEA,SAAS,gBAAgB,CAAC,SAAS,IAAI,CAAC,CAAC,kBAAkB;IAC7D;IAEA,CAAC,kBAAkB,CAAC,aAAa;QAC/B,MAAM,eAAe,SAAS,aAAa,CAAC;QAE5C,aAAa,SAAS,CAAC,GAAG,CAAC;QAE3B,MAAM,gBAAgB,SAAS,aAAa,CAAC;QAE7C,cAAc,SAAS,CAAC,GAAG,CAAC;QAC5B,aAAa,WAAW,CAAC;QAEzB,MAAM,cAAc,SAAS,aAAa,CAAC;QAE3C,YAAY,SAAS,CAAC,GAAG,CAAC;QAC1B,aAAa,WAAW,CAAC;QAEzB,IAAI,CAAC,CAAC,aAAa,CAAC,eAAe,eAAe;QAElD,cAAc,gBAAgB,CAAC,SAAS;YACtC,aAAa,SAAS,CAAC,MAAM,CAAC;QAChC;QAEA,OAAO;IACT;IAEA,CAAC,aAAa,CAAC,aAAa,EAAE,aAAa,EAAE,WAAW;QACtD,MAAM,UAAU,cAAc,gBAAgB,CAAC;QAE/C,QAAQ,OAAO,CAAC,CAAC,QAAQ;YACvB,MAAM,aAAa,SAAS,aAAa,CAAC;YAE1C,WAAW,SAAS,CAAC,GAAG,CAAC;YACzB,WAAW,WAAW,GAAG,OAAO,WAAW;YAE3C,MAAM,aAAa,OAAO,YAAY,CAAC;YAEvC,IAAI,YACF,WAAW,SAAS,CAAC,GAAG,CAAC,CAAC,oBAAoB,EAAE,WAAW,CAAC;YAG9D,IAAI,OAAO,QAAQ,EAAE;gBACnB,WAAW,SAAS,CAAC,GAAG,CAAC;gBACzB,cAAc,WAAW,GAAG,OAAO,WAAW;YAChD;YAEA,WAAW,gBAAgB,CAAC,SAAS;gBACnC,IAAI,CAAC,CAAC,UAAU,CAAC,YAAY,eAAe,eAAe,OAAO;YACpE;YAEA,YAAY,WAAW,CAAC;QAC1B;IACF;IAEA,CAAC,UAAU,CAAC,UAAU,EAAE,aAAa,EAAE,aAAa,EAAE,KAAK,EAAE,WAAW;QACtE,YAAY,gBAAgB,CAAC,uBAAuB,OAAO,CAAC,CAAA;YAC1D,KAAK,SAAS,CAAC,MAAM,CAAC;QACxB;QAEA,WAAW,SAAS,CAAC,GAAG,CAAC;QACzB,cAAc,WAAW,GAAG,WAAW,WAAW;QAClD,cAAc,aAAa,GAAG;QAE9B,MAAM,QAAQ,IAAI,MAAM;QAExB,cAAc,aAAa,CAAC;QAE5B,WAAW,OAAO,CAAC,kBAAkB,SAAS,CAAC,MAAM,CAAC;IACxD;IAEA,CAAC,kBAAkB,CAAC,CAAC;QACnB,MAAM,eAAe,SAAS,aAAa,CAAC;QAE5C,IAAI,gBAAgB,CAAC,aAAa,QAAQ,CAAC,EAAE,MAAM,GACjD,aAAa,SAAS,CAAC,MAAM,CAAC;IAElC;AACF;IAEA,2CAAe","sources":["src/SelectOptions.js"],"sourcesContent":["class SelectOptions {\n  constructor() {\n\n  }\n\n  init() {\n    const selectElements = document.querySelectorAll('.select-option-container select[name=\"select\"]');\n\n    selectElements.forEach(selectElement => {\n      const customSelect = this.#createCustomSelect(selectElement);\n\n      selectElement.style.display = 'none';\n      selectElement.parentNode.insertBefore(customSelect, selectElement.nextSibling);\n    });\n\n    document.addEventListener('click', this.#closeOpenDropdowns);\n  }\n\n  #createCustomSelect(selectElement) {\n    const customSelect = document.createElement('div');\n\n    customSelect.classList.add('select-option');\n\n    const selectTrigger = document.createElement('div');\n\n    selectTrigger.classList.add('select-option-trigger');\n    customSelect.appendChild(selectTrigger);\n\n    const selectItems = document.createElement('div');\n\n    selectItems.classList.add('select-option-items');\n    customSelect.appendChild(selectItems);\n\n    this.#createOptions(selectElement, selectTrigger, selectItems);\n\n    selectTrigger.addEventListener('click', () => {\n      customSelect.classList.toggle('select-option--open');\n    });\n\n    return customSelect;\n  }\n\n  #createOptions(selectElement, selectTrigger, selectItems) {\n    const options = selectElement.querySelectorAll('option');\n\n    options.forEach((option, index) => {\n      const selectItem = document.createElement('div');\n\n      selectItem.classList.add('select-option-item');\n      selectItem.textContent = option.textContent;\n\n      const labelValue = option.getAttribute('label');\n\n      if (labelValue) {\n        selectItem.classList.add(`select-option-item--${labelValue}`);\n      }\n\n      if (option.selected) {\n        selectItem.classList.add('select-option-item--selected');\n        selectTrigger.textContent = option.textContent;\n      }\n\n      selectItem.addEventListener('click', () => {\n        this.#selectItem(selectItem, selectTrigger, selectElement, index, selectItems);\n      });\n\n      selectItems.appendChild(selectItem);\n    });\n  }\n\n  #selectItem(selectItem, selectTrigger, selectElement, index, selectItems) {\n    selectItems.querySelectorAll('.select-option-item').forEach(item => {\n      item.classList.remove('select-option-item--selected');\n    });\n\n    selectItem.classList.add('select-option-item--selected');\n    selectTrigger.textContent = selectItem.textContent;\n    selectElement.selectedIndex = index;\n\n    const event = new Event('change');\n\n    selectElement.dispatchEvent(event);\n\n    selectItem.closest('.select-option').classList.remove('select-option--open');\n  }\n\n  #closeOpenDropdowns(e) {\n    const openDropdown = document.querySelector('.select-option.select-option--open');\n\n    if (openDropdown && !openDropdown.contains(e.target)) {\n      openDropdown.classList.remove('select-option--open');\n    }\n  }\n}\n\nexport default SelectOptions;\n"],"names":[],"version":3,"file":"select-options.js.map"}