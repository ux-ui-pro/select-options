{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["class SelectOptions {\n  private selectContainer: HTMLSelectElement[] = [];\n  private floatingLabel: HTMLElement[] = [];\n  private notches: { container: HTMLElement, notch: HTMLElement }[] = [];\n  private customSelects: HTMLElement[] = [];\n  private openSelect: HTMLElement | null = null;\n  private resizeObserver: ResizeObserver;\n  private readonly mobileMode: boolean = false;\n\n  constructor({ mobileMode = false }: { mobileMode?: boolean } = {}) {\n    this.mobileMode = mobileMode;\n    this.selectContainer = Array.from(document.querySelectorAll('.select-option-container select'));\n    this.floatingLabel = Array.from(document.querySelectorAll('.floating-label'));\n\n    this.resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        const notch = entry.target.closest('.notched-outline')?.querySelector('.notched-outline__notch') as HTMLElement | null;\n        if (notch) SelectOptions.setNotchWidth(notch, SelectOptions.getNotchWidth(notch));\n      });\n    });\n  }\n\n  private notched() {\n    this.floatingLabel.forEach((label) => {\n      const notchedOutline = label.closest('.notched-outline') ?? SelectOptions.createNotchedOutline(label);\n      this.notches.push({ container: notchedOutline.parentNode as HTMLElement, notch: notchedOutline.querySelector('.notched-outline__notch')! });\n\n      const lastNotch = this.notches.at(-1)?.notch as HTMLElement | null;\n      if (lastNotch) {\n        SelectOptions.setNotchWidth(lastNotch, SelectOptions.getNotchWidth(lastNotch));\n        this.resizeObserver.observe(notchedOutline.querySelector('.floating-label') as HTMLElement);\n      }\n    });\n  }\n\n  private static createNotchedOutline(label: HTMLElement): HTMLElement {\n    const notchedOutline = document.createElement('div');\n    notchedOutline.classList.add('notched-outline');\n    notchedOutline.innerHTML = `\n      <div class=\"notched-outline__leading\"></div>\n      <div class=\"notched-outline__notch\">${label.outerHTML}</div>\n      <div class=\"notched-outline__trailing\"></div>\n    `;\n    label.replaceWith(notchedOutline);\n    return notchedOutline;\n  }\n\n  private static setNotchWidth(notch: HTMLElement, width: string) {\n    notch.style.width = width;\n  }\n\n  private static getNotchWidth(notch: HTMLElement): string {\n    const label = notch.querySelector('.floating-label') as HTMLElement;\n    return label ? `${(parseFloat(getComputedStyle(label).width) + 13) * 0.75}px` : 'auto';\n  }\n\n  private setupCustomSelect(selectElement: HTMLSelectElement, customSelect: HTMLElement, options: HTMLOptionElement[]) {\n    const selectTrigger = customSelect.querySelector('.select-option-trigger') as HTMLElement ?? document.createElement('div');\n    const selectItems = customSelect.querySelector('.select-option-list') as HTMLElement ?? document.createElement('div');\n\n    selectTrigger.classList.add('select-option-trigger');\n    selectItems.classList.add('select-option-list');\n    customSelect.append(selectTrigger, selectItems);\n\n    this.createOptions(selectElement, selectTrigger, selectItems, options);\n\n    if (!(this.mobileMode && SelectOptions.isMobileDevice())) {\n      selectTrigger.addEventListener('click', (e) => {\n        e.stopPropagation();\n        if (this.openSelect === customSelect) {\n          this.closeDropdown(customSelect);\n        } else {\n          this.openDropdown(customSelect);\n        }\n      });\n    }\n\n    SelectOptions.updateCustomSelectState(customSelect, selectElement);\n    this.customSelects.push(customSelect);\n\n    selectElement.addEventListener('change', () => {\n      this.updateCustomSelect(selectElement, customSelect, options);\n    });\n\n    if (this.mobileMode && SelectOptions.isMobileDevice()) {\n      customSelect.classList.add('select-option--mobile');\n    }\n  }\n\n  private createOptions(selectElement: HTMLSelectElement, selectTrigger: HTMLElement, selectItems: HTMLElement, options: HTMLOptionElement[]) {\n    selectItems.innerHTML = '';\n\n    options.forEach((option, index) => {\n      const selectItem = document.createElement('div');\n      selectItem.classList.add('select-option-list-item');\n      selectItem.textContent = option.textContent;\n\n      const labelValue = option.getAttribute('label');\n      if (labelValue) selectItem.classList.add(`select-option-list-item--${labelValue}`);\n\n      if (option.selected) {\n        selectItem.classList.add('select-option-list-item--selected');\n        selectTrigger.textContent = option.textContent;\n        if (labelValue) selectTrigger.classList.add(`select-option-trigger--${labelValue}`);\n      }\n\n      selectItem.addEventListener('click', () => this.selectItem(selectItem, selectTrigger, selectElement, index, selectItems));\n      selectItems.appendChild(selectItem);\n    });\n  }\n\n  private updateCustomSelect(selectElement: HTMLSelectElement, customSelect: HTMLElement, options: HTMLOptionElement[]) {\n    const selectTrigger = customSelect.querySelector('.select-option-trigger') as HTMLElement;\n    const selectItems = customSelect.querySelector('.select-option-list') as HTMLElement;\n    const { selectedIndex } = selectElement;\n    const selectedOption = options[selectedIndex];\n    const labelValue = selectedOption.getAttribute('label');\n\n    selectTrigger.textContent = selectedOption.textContent;\n    selectTrigger.classList.remove(...Array.from(selectTrigger.classList).filter((cls) => cls.startsWith('select-option-trigger--')));\n\n    if (labelValue) {\n      selectTrigger.classList.add(`select-option-trigger--${labelValue}`);\n    }\n\n    customSelect.classList.toggle('select-option--selected', selectedIndex > 0);\n    this.createOptions(selectElement, selectTrigger, selectItems, options);\n  }\n\n  private selectItem(selectItem: HTMLElement, selectTrigger: HTMLElement, selectElement: HTMLSelectElement, index: number, selectItems: HTMLElement) {\n    const customSelect = selectTrigger.closest('.select-option') as HTMLElement;\n    const items = Array.from(selectItems.children);\n\n    items.forEach((item) => item.classList.remove('select-option-list-item--selected'));\n    selectItem.classList.add('select-option-list-item--selected');\n\n    selectTrigger.textContent = selectItem.textContent;\n    selectElement.selectedIndex = index;\n\n    selectTrigger.classList.remove(...Array.from(selectTrigger.classList).filter((cls) => cls.startsWith('select-option-trigger--')));\n\n    const selectedOption = selectElement.options[index];\n    const labelValue = selectedOption.getAttribute('label');\n    if (labelValue) selectTrigger.classList.add(`select-option-trigger--${labelValue}`);\n\n    customSelect.classList.toggle('select-option--selected', index > 0);\n    selectElement.dispatchEvent(new Event('change'));\n\n    this.closeDropdown(customSelect);\n  }\n\n  private closeDropdown(customSelect: HTMLElement) {\n    customSelect.classList.remove('select-option--opened');\n    this.openSelect = null;\n  }\n\n  private openDropdown(customSelect: HTMLElement) {\n    this.closeOpenedDropdowns();\n    customSelect.classList.add('select-option--opened');\n    this.openSelect = customSelect;\n  }\n\n  private closeOpenedDropdowns(e?: MouseEvent) {\n    this.customSelects.forEach((dropdown) => {\n      if (!e || !dropdown.contains(e.target as Node)) dropdown.classList.remove('select-option--opened');\n    });\n    this.openSelect = null;\n  }\n\n  private static checkAndSetDownstairsClass(customSelect: HTMLElement) {\n    const rect = customSelect.getBoundingClientRect();\n    customSelect.classList.toggle('select-option--downstairs', rect.bottom + 160 > window.innerHeight);\n  }\n\n  private handleResize() {\n    this.customSelects.forEach(SelectOptions.checkAndSetDownstairsClass);\n  }\n\n  private static isMobileOS(): boolean {\n    return (/android/i.test(navigator.userAgent || navigator.vendor)) || ((/iPad|iPhone|iPod/.test(navigator.userAgent || navigator.vendor)) && !('MSStream' in window));\n  }\n\n  private static isTouchDevice(): boolean {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || window.matchMedia('(hover: none) and (pointer: coarse)').matches;\n  }\n\n  private static isMobileDevice(): boolean {\n    return SelectOptions.isTouchDevice() || SelectOptions.isMobileOS();\n  }\n\n  private static updateCustomSelectState(customSelect: HTMLElement, selectElement: HTMLSelectElement) {\n    const hasLabel = customSelect.querySelector('label.floating-label') !== null;\n\n    customSelect.classList.toggle('select-option--labeled', hasLabel);\n    customSelect.classList.toggle('select-option--unlabeled', !hasLabel);\n    customSelect.classList.toggle('select-option--selected', hasLabel && selectElement.selectedIndex > 0);\n  }\n\n  async init() {\n    this.notched();\n    this.selectContainer.forEach((selectElement) => {\n      const customSelect = selectElement.closest('.select-option-container')?.querySelector('.select-option') as HTMLElement;\n      const options = Array.from(selectElement.options) as HTMLOptionElement[];\n      if (customSelect) {\n        this.setupCustomSelect(selectElement, customSelect, options);\n        SelectOptions.checkAndSetDownstairsClass(customSelect);\n      }\n    });\n\n    document.addEventListener('click', this.closeOpenedDropdowns.bind(this));\n    window.addEventListener('resize', this.handleResize.bind(this));\n    window.addEventListener('scroll', this.handleResize.bind(this));\n  }\n}\n\nexport default SelectOptions;\n"],"names":[],"version":3,"file":"index.module.js.map"}